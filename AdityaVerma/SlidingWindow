Sliding Window 

0> Video -4  Maximum Sum subarray of size k 
    def maxSum(arr,k):
        i,j=0,0
        maxSum,sum=0,0
    
        while j<len(arr):
            sum+=arr[j]
            if j-i+1==k:
                maxSum=max(maxSum,sum)
                sum-=arr[i]
                i+=1
            j+=1
        return maxSum
    
    arr = [100, 200, 300, 400]
    k = 2
    print(maxSum(arr,k))
1> Video 5 -> Find All Anagrams in a String

class Solution(object):
    from collections import Counter
    def countAnagrams(arr,str):
        dict=Counter(str)
        cnt=len(dict)
        i,j=0,0
        res=0
        while j<len(arr):
            if arr[j] in dict:
                dict[arr[j]]-=1
                if dict[arr[j]]==0:
                    cnt-=1
            if j-i+1 ==len(str):
                if cnt==0:
                    res+=1
                if arr[i] in dict:
                    dict[arr[i]]+=1
                    if dict[arr[i]]==1:
                        cnt+=1
                i+=1
            j+=1
    
        return  res
    
    txt = "aabaabaa"
    pat = "aaba"
    print(countAnagrams(txt,pat))
        
      ---------------------
      
     2> Video 6 -> Maximum sliding window 
     
     class Solution(object):
    def maxSlidingWindow(self, arr, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        res=[]
        lst=[]
        i,j=0,0
        while j<len(arr):
            while lst and lst[-1]<arr[j]:
                lst.pop()
            lst.append(arr[j])
            if j-i+1==k:
                res.append(lst[0])
                if arr[i]==lst[0]:
                    lst.pop(0)
                i+=1
            j+=1
        return res
        
     
     
     Video 10 ->  Longest Substring With K Unique Characters
     
        res=-1
        dict={}
        i,j=0,0
        while j<len(arr):
            if arr[j] not in dict:
                dict[arr[j]]=1
            else:
                dict[arr[j]]+=1
            if len(dict)==k:
                res=max(res,j-i+1)
            while len(dict)>k:
                dict[arr[i]]-=1
                if dict[arr[i]]==0:
                    del dict[arr[i]]
                i+=1
            j+=1
        return  res
        
    Video 11 ->  Longest Substring With all Unique Characters
    
        def lengthOfLongestSubstring(self, arr):
        """
        :type s: str
        :rtype: int
        """
        i,j=0,0
        d={}
        maxLen=0

        while j< len(arr):
            if arr[j] not in d :
                d[arr[j]]=1
            else:
                d[arr[j]]+=1
            if len(d)==j-i+1 :
                maxLen=max(maxLen,j-i+1)
            elif len(d)<j-i+1:
                while len(d)<j-i+1:
                    d[arr[i]]-=1
                    if d[arr[i]]==0:
                        del d[arr[i]]
                    i+=1
            j+=1

        return (maxLen)

Video 12 https://leetcode.com/problems/fruit-into-baskets/submissions/1447430452/
      def totalFruit(self, arr):
        """
        :type fruits: List[int]
        :rtype: int
        """
        i,j=0,0
        res=0
        dict={}
        while j<len(arr):
            if arr[j] in dict:
                dict[arr[j]]+=1
            else:
                dict[arr[j]]=1
            if len(dict)<=2:
                res=max(res,j-i+1)
            while len(dict)>2:
                dict[arr[i]]-=1
                if dict[arr[i]]==0:
                    del dict[arr[i]]
                i+=1
            j+=1
        return res

Video 13 https://leetcode.com/problems/minimum-window-substring/

    def minWindow(self, arr, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        from collections import  Counter
        dict=Counter(t)
        counter=len(dict)
        i,j=0,0
        res=len(arr)+1
        finalString=""
        while j<len(arr):
            if arr[j] in dict:
                dict[arr[j]]-=1
                if dict[arr[j]]==0:
                    counter-=1
            while counter==0:
                if j-i+1< res:
                    res=j-i+1
                    finalString=arr[i:j+1]
                if arr[i] in dict:
                    dict[arr[i]]+=1
                    if dict[arr[i]]==1:
                        counter+=1
                i+=1
            j+=1
        return  finalString
        
        
        

